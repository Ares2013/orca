# Inspired by:
# https://github.com/teppeis-sandbox/circleci2-multiple-node-versions/blob/master/.circleci/config.yml
#
# List of node images:
# https://hub.docker.com/r/circleci/node/tags/
#
# Note that we use the '-browsers' variation which wraps electron with xvfb
# for headless testing

workflows:
  version: 2
  test-and-push:
    jobs:
      - test-node-v6
      - test-node-v8
      - docker-build-and-push:
          requires:
            - test-node-v6
            - test-node-v8
          filters:
            branches:
              # Do not run on branches based off forks as
              # this job requires plotly's quay.io credentials.
              # Note that branches based off forks are labels pull/???/ on CI.
              # Solution taken from:
              # https://discuss.circleci.com/t/create-separate-steps-jobs-for-pr-forks-versus-branches/13419/4
              only: /^(?!pull\/).*$/
      - electron-pack-and-release:
          requires:
            - test-node-v6
            - test-node-v8

version: 2
jobs:
  base: &base
    docker:
      - image: node
    steps:
      - run:
          name: List versions
          command: |
            echo "npm: $(npm --version)"
            echo "node: $(node --version)"
      - restore_cache:
          key: v1-source-{{ .Branch }}-{{ .Revision }}
          keys:
            - v1-source-{{ .Branch }}-
            - v1-source-
      - checkout
      - save_cache:
          key: v1-source-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - restore_cache:
          key: v3-npm-{{ checksum "package-lock.json" }}
          keys:
            - v3-npm-
      - run: node --version
      - run: npm --version
      - run:
          name: Install deps
          command: |
            npm install
            sudo apt-get update
            sudo apt-get install inkscape poppler-utils libgconf-2-4
      - run:
          name: List deps
          command: |
            npm list || true
            pdftops -v
      - save_cache:
          key: v3-npm-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Test
          command: ./.circleci/test.sh
      - run:
          name: Coverage
          command: npm run coverage
      - store_artifacts:
          path: build

  test-node-v6:
    <<: *base
    docker:
      - image: circleci/node:6.14-stretch-browsers

  test-node-v8:
    <<: *base
    docker:
      - image: circleci/node:8.11-stretch-browsers

  docker-build-and-push:
    docker:
      - image: circleci/node:8.11-stretch-browsers
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          key: v1-source-{{ .Branch }}-{{ .Revision }}
          keys:
            - v1-source-{{ .Branch }}-
            - v1-source-
      - checkout
      - save_cache:
          key: v1-source-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - restore_cache:
          key: v3-npm-{{ checksum "package-lock.json" }}
          keys:
            - v3-npm-
      - run:
          name: Build Docker image
          command: |
            docker build -f deployment/Dockerfile -t quay.io/plotly/image-exporter:$CIRCLE_SHA1 .
      - run:
          name: Smoke test Docker image
          command: |
            docker run -d -p 9091:9091/tcp --name imageserver quay.io/plotly/image-exporter:$CIRCLE_SHA1
            docker run --network container:imageserver quay.io/plotly/wget wget --retry-connrefused --waitretry=1 -t 60 -O /dev/null --progress=dot http://localhost:9091/ping
      - run:
          name: Push Docker image to Quay
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS quay.io
            docker push quay.io/plotly/image-exporter:$CIRCLE_SHA1

            # Is this a "version" commit? e.g. from `npm version`
            # inspired by: https://discuss.circleci.com/t/git-tag-deploys-in-2-0/9493/4
            if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$"; then
              # if so, tag and push as version number
              echo "Version commit: tag & push image as vX.Y.Z"
              version=v$(git log -1 --pretty=%B)
              docker tag quay.io/plotly/image-exporter:$CIRCLE_SHA1 quay.io/plotly/image-exporter:$version
              docker push quay.io/plotly/image-exporter:$version
            fi

            # Is this branch named after a version "x.x.x" or a build release "x.x.xbx" where x are digits
            if echo $CIRCLE_BRANCH | grep -E "^[0-9]+\.[0-9]+\.[0-9]+(b[0-9]+)?$"; then
              # if so, do NOT push image as branch name to not conflict
              # with images named after version numbers
              echo "WARNING: branch name matches version number regex"
              echo "...  quay.io/plotly/image-exporter:$CIRCLE_BRANCH will NOT be pushed to quay.io"
            else
              # otherwise, tag and push as branch name
              echo "Tag and push image as branch name"
              docker tag quay.io/plotly/image-exporter:$CIRCLE_SHA1 quay.io/plotly/image-exporter:$CIRCLE_BRANCH
              docker push quay.io/plotly/image-exporter:$CIRCLE_BRANCH
            fi
      - save_cache:
          paths:
            - node_modules
          key: v3-npm-{{ checksum "package-lock.json" }}

  electron-pack-and-release:
    docker:
      - image: circleci/node:8.11-stretch-browsers
    steps:
      - restore_cache:
          key: v1-source-{{ .Branch }}-{{ .Revision }}
          keys:
            - v1-source-{{ .Branch }}-
            - v1-source-
      - checkout
      - save_cache:
          key: v1-source-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - restore_cache:
          key: v3-npm-{{ checksum "package-lock.json" }}
          keys:
            - v3-npm-
      - run: node --version
      - run: npm --version
      - run: npm install
      - run:
          name: Electron-Builder pack
          command: npm run pack
      - save_cache:
          key: v3-npm-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Install miniconda
          command: |
            wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
            chmod +x miniconda.sh
            ./miniconda.sh -b -p $HOME/miniconda
      - run:
          name: Conda pack
          command: |
            $HOME/miniconda/bin/conda install --yes conda-build
            $HOME/miniconda/bin/conda build recipe/
            ls $HOME/miniconda/conda-bld/linux-64
      - run:
          name: Collect artifacts
          command: |
            mkdir artifacts
            # electron-pack
            mv release/*.yml artifacts || true
            mv release/orca* artifacts
            # conda
            cp -r $HOME/miniconda/conda-bld/linux-64 ./linux-64
            zip -r artifacts/conda-linux-64.zip ./linux-64
      - store_artifacts:
          path: artifacts
